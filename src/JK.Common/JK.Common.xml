<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JK.Common</name>
    </assembly>
    <members>
        <member name="T:JK.Common.Contracts.IIdentifiable`1">
            <summary>Interface which defines identifiable objects.</summary>
            <typeparam name="T">Type used for the unique ID of the entity.</typeparam>
        </member>
        <member name="P:JK.Common.Contracts.IIdentifiable`1.Id">
            <summary>
            Gets the property which uniquely identifies the object. 
            </summary>
        </member>
        <member name="T:JK.Common.Data.AdoParameterFactory">
            <summary>
            Class which created and sets up DbParameters for ADO use.
            </summary>
        </member>
        <member name="M:JK.Common.Data.AdoParameterFactory.#ctor(System.Data.IDbCommand)">
            <summary>
            Initializes a new instance of the DbParameterFactory class.
            </summary>
            <param name="commandToUse">The ADO DB Command.</param>
        </member>
        <member name="M:JK.Common.Data.AdoParameterFactory.Make(System.String,System.Data.DbType,System.Data.ParameterDirection)">
            <summary>
            Uses the ADO DbProviderFactory to create a DbParameter of the correct type.
            </summary>
            <param name="name">Name of parameter.</param>
            <param name="databaseType">Database type of parameter.</param>
            <returns>DbParameter object for the provider.</returns>
        </member>
        <member name="T:JK.Common.Data.Contracts.INonQueryOperation">
            <summary>
            Interface for void, non-typed data operations such as delete and update.
            </summary>
        </member>
        <member name="M:JK.Common.Data.Contracts.INonQueryOperation.Execute">
            <summary>
            Execute method for data operation.
            </summary>
        </member>
        <member name="T:JK.Common.Data.Contracts.IQueryOperation`1">
            <summary>
            Interface for get data operations.
            </summary>
            <typeparam name="T">Type of item to get a list of.</typeparam>
        </member>
        <member name="M:JK.Common.Data.Contracts.IQueryOperation`1.Execute">
            <summary>
            Execute method for data operation.
            </summary>
            <returns>List of items of given type.</returns>
        </member>
        <member name="T:JK.Common.Data.DatabaseValueParser">
            <summary>
            Static class which adds database value parsing.
            </summary>
        </member>
        <member name="M:JK.Common.Data.DatabaseValueParser.GetValueOrDefault``1(System.Object)">
            <summary>
            Gets the value of an object or returns the objects default type.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="value">Object to test.</param>
            <returns>Object's type default if DBNull, otherwise the object's value.</returns>
        </member>
        <member name="M:JK.Common.Data.DatabaseValueParser.GetValueOrDefault``1(System.Object,``0)">
            <summary>
            Gets the value of an object or returns the given default value.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="value">Object to test.</param>
            <param name="defaultValue">Value to use is DBNull.</param>
            <returns>Given default value if DBNull, otherwise the object's value.</returns>
        </member>
        <member name="M:JK.Common.Data.DatabaseValueParser.GetValueOrNull``1(System.Object)">
            <summary>
            Gets the value of an object or null.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="value">Object to test.</param>
            <returns>Null if DBNull, otherwise the object's value.</returns>
        </member>
        <member name="M:JK.Common.Data.DatabaseValueParser.GetValueOrDbNull``1(System.Nullable{``0})">
            <summary>
            Get value or DbNull from a Nullable type.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="nullable">Object to get value or DbNull.</param>
            <returns>If not null value of object, otherwise DbNull.</returns>
        </member>
        <member name="T:JK.Common.Data.Extensions.DataRecordExtensions">
            <summary>
            Extension methods for IDataRecord
            </summary>  
        </member>
        <member name="M:JK.Common.Data.Extensions.DataRecordExtensions.GetValueOrDefault``1(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the given field from the data reader or the 
            default for the object type.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="dataRecord">Current IDataRecord object from extension method.</param>
            <param name="name">Name of field within IDataRecord.</param>
            <returns>The given field's value or the default for the object type.</returns>
        </member>
        <member name="M:JK.Common.Data.Extensions.DataRecordExtensions.GetValueOrDefault``1(System.Data.IDataRecord,System.String,``0)">
            <summary>
            Gets the value of the given field from the data reader or the 
            default for the object type.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="dataRecord">Current IDataRecord object from extension method.</param>
            <param name="name">Name of field within IDataRecord.</param>
            <param name="defaultValue">Value to use if null field value.</param>
            <returns>The given field's value or the given default.</returns>
        </member>
        <member name="M:JK.Common.Data.Extensions.DataRecordExtensions.GetValueOrDefault``1(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the given field from the data reader or the 
            default for the object type.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="dataRecord">Current IDataRecord object from extension method.</param>
            <param name="index">Index of field within IDataRecord.</param>
            <returns>The given field's value or the default for the object type.</returns>
        </member>
        <member name="M:JK.Common.Data.Extensions.DataRecordExtensions.GetValueOrDefault``1(System.Data.IDataRecord,System.Int32,``0)">
            <summary>
            Gets the value of the given field from the data reader or the 
            default for the object type.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="dataRecord">Current IDataRecord object from extension method.</param>
            <param name="index">Index of field within IDataRecord.</param>
            <param name="defaultValue">Value to use if null field value.</param>
            <returns>The given field's value or the given default.</returns>
        </member>
        <member name="M:JK.Common.Data.Extensions.DataRecordExtensions.GetValueOrNull``1(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the given field from the data reader or null.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="dataRecord">Current IDataRecord object from extension method.</param>
            <param name="name">Name of field within IDataRecord.</param>
            <returns>The given field's value or null.</returns>
        </member>
        <member name="M:JK.Common.Data.Extensions.DataRecordExtensions.GetValueOrNull``1(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the given field from the data reader or null.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="dataRecord">Current IDataRecord object from extension method.</param>
            <param name="index">Index of field within IDataRecord.</param>
            <returns>The given field's value or null.</returns>
        </member>
        <member name="M:JK.Common.Data.Extensions.DataRecordExtensions.HasColumn(System.Data.IDataRecord,System.String)">
            <summary>
            Determine whether or not the given column exists in the record.
            </summary>
            <param name="dataRecord">The data record to search within.</param>
            <param name="columnName">The column name to search for.</param>
            <returns>True if column found, otherwise false.</returns>
        </member>
        <member name="M:JK.Common.Data.Extensions.DataRecordExtensions.IsDbNull(System.Data.IDataRecord,System.String)">
            <summary>
            Determines whether the given field is null.
            </summary>
            <param name="dataRecord">Current IDataRecord object from extension method.</param>
            <param name="name">Name of field within IDataRecord.</param>
            <returns>True if DBNull, otherwise false.</returns>
        </member>
        <member name="M:JK.Common.Data.ParameterFactoryBase`1.Make``1(System.String,``0,System.Data.ParameterDirection)">
            <summary>
            Uses the ADO DbProviderFactory to create a DbParameter of the correct type.
            </summary>
            <typeparam name="T">Generic type to use.</typeparam>
            <param name="name">Name of parameter.</param>
            <param name="value">Value to insert into parameter.</param>
            <returns>DbParameter object for the provider.</returns>
        </member>
        <member name="M:JK.Common.Data.ParameterFactoryBase`1.Make``1(System.String,System.Nullable{``0},System.Data.ParameterDirection)">
            <summary>
            Uses the ADO DbProviderFactory to create a DbParameter of the correct type.
            </summary>
            <typeparam name="T">Generic type to use.</typeparam>
            <param name="name">Name of parameter.</param>
            <param name="value">Value to insert into parameter.</param>
            <returns>DbParameter object for the provider.</returns>
        </member>
        <member name="M:JK.Common.Data.ParameterFactoryBase`1.Make(System.String,System.String,System.Data.ParameterDirection)">
            <summary>
            Uses the ADO DbProviderFactory to create a String DbParameter.
            </summary>
            <param name="name">Name of parameter.</param>
            <param name="value">String value to insert into parameter.</param>
            <returns>DbParameter object for the provider.</returns>
        </member>
        <member name="T:JK.Common.DeepCloner">
            <summary>
            Object used to create deep clones using XML serialization.
            </summary>
        </member>
        <member name="M:JK.Common.DeepCloner.Clone(System.Object)">
            <summary>
            Clones the given object.
            </summary>
            <param name="valueToClone">Object to clone.</param>
            <returns>Exact clone of an object.</returns>
        </member>
        <member name="T:JK.Common.Extensions.DateTimeExtensions">
            <summary>Extension methods for the DateTime object.</summary>
        </member>
        <member name="M:JK.Common.Extensions.DateTimeExtensions.CalculateAge(System.DateTime,System.DateTime)">
            <summary>
            Calculates age of an individual.
            </summary>
            <param name="dt">Current DateTime object from extension method.</param>
            <param name="birthday">Date of birth.</param>
            <returns>Age from birth date to given date.</returns>
        </member>
        <member name="M:JK.Common.Extensions.DateTimeExtensions.GetAbbreviatedDayName(System.DateTime)">
            <summary>
            Gets the abbreviated day name.
            </summary>
            <param name="dt">Current DateTime object from extension method.</param>
            <returns>Abbreviated day name.</returns>
        </member>
        <member name="M:JK.Common.Extensions.DateTimeExtensions.GetAbbreviatedDayName(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            Gets the abbreviated day name.
            </summary>
            <param name="dt">Current DateTime object from extension method.</param>
            <param name="currentCulture">Culture to use when getting day name.</param>
            <returns>Abbreviated day name.</returns>
        </member>
        <member name="M:JK.Common.Extensions.DateTimeExtensions.GetAbbreviatedMonthName(System.DateTime)">
            <summary>
            Gets the abbreviated month name.
            </summary>
            <param name="dt">Current DateTime object from extension method.</param>
            <returns>Abbreviated month name.</returns>
        </member>
        <member name="M:JK.Common.Extensions.DateTimeExtensions.GetAbbreviatedMonthName(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            Gets the abbreviated month name.
            </summary>
            <param name="dt">Current DateTime object from extension method.</param>
            <param name="currentCulture">Culture to use when getting month name.</param>
            <returns>Abbreviated month name.</returns>
        </member>
        <member name="M:JK.Common.Extensions.DateTimeExtensions.GetDayName(System.DateTime)">
            <summary>
            Gets the full name of a given day.
            </summary>
            <param name="dt">Current DateTime object from extension method.</param>
            <returns>Full day name.</returns>
        </member>
        <member name="M:JK.Common.Extensions.DateTimeExtensions.GetDayName(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            Gets the full name of a given day.
            </summary>
            <param name="dt">Current DateTime object from extension method.</param>
            <param name="currentCulture">Culture to use when getting day name.</param>
            <returns>Full day name.</returns>
        </member>
        <member name="M:JK.Common.Extensions.DateTimeExtensions.GetMonthName(System.DateTime)">
            <summary>
            Gets the full name of a month.
            </summary>
            <param name="dt">Current DateTime object from extension method.</param>
            <returns>Full month name.</returns>
        </member>
        <member name="M:JK.Common.Extensions.DateTimeExtensions.GetMonthName(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            Gets the full name of a month.
            </summary>
            <param name="dt">Current DateTime object from extension method.</param>
            <param name="currentCulture">Culture to use when getting month name.</param>
            <returns>Full month name.</returns>
        </member>
        <member name="M:JK.Common.Extensions.DateTimeExtensions.IsWeekday(System.DateTime)">
            <summary>
            Determines if given date is a weekday.
            </summary>
            <param name="dt">Current DateTime object from extension method.</param>
            <returns>True if is a weekday, otherwise false.</returns>
        </member>
        <member name="M:JK.Common.Extensions.DateTimeExtensions.IsWeekend(System.DateTime)">
            <summary>
            Determines if given date is a weekday.
            </summary>
            <param name="dt">Current DateTime object from extension method.</param>
            <returns>True if is a weekend, otherwise false.</returns>
        </member>
        <member name="T:JK.Common.Extensions.StringExtensions">
            <summary>Extension methods for the String object.</summary>
        </member>
        <member name="M:JK.Common.Extensions.StringExtensions.IsDateTime(System.String)">
            <summary>
            Determines if the given string is a date/time. 
            Relies on <see cref="T:JK.Common.Specifications.DateTimeSpecification"/>
            </summary>
            <param name="valueToValidate">Current string object from extension method.</param>
            <returns>True if a date, otherwise false.</returns>
        </member>
        <member name="M:JK.Common.Extensions.StringExtensions.IsNumeric(System.String)">
            <summary>
            Determines if the given string is a number.
            Relies on <see cref="T:JK.Common.Specifications.NumericSpecification"/>
            </summary>
            <param name="valueToValidate">Current string object from extension method.</param>
            <returns>True if a number, otherwise false.</returns>
        </member>
        <member name="M:JK.Common.Extensions.StringExtensions.IsValidEmailAddress(System.String)">
            <summary>
            Validates that a string is a valid email address.
            Relies on <see cref="T:JK.Common.Specifications.EmailSpecification"/>
            </summary>
            <param name="valueToValidate">Current string object from extension method.</param>
            <returns>True if valid email otherwise false.</returns>
        </member>
        <member name="M:JK.Common.Extensions.StringExtensions.IsValidIpAddress(System.String)">
            <summary>
            Validates that a string is a valid IP v4 address.
            Relies on <see cref="T:JK.Common.Specifications.InternetProtocolAddressSpecification"/>
            </summary>
            <param name="valueToValidate">Current string object from extension method.</param>
            <returns>True if valid IP v4 address otherwise false.</returns>
        </member>
        <member name="M:JK.Common.Extensions.StringExtensions.IsValidUnitedStatesPhoneNumber(System.String)">
            <summary>
            Validates that a string is a valid United States phone number.
            Relies on <see cref="T:JK.Common.Specifications.UnitedStates.PhoneNumberSpecification"/>
            </summary>
            <param name="valueToValidate">Current string object from extension method.</param>
            <returns>True if valid US phone number otherwise false.</returns>
        </member>
        <member name="M:JK.Common.Extensions.StringExtensions.IsValidZip(System.String)">
            <summary>
            Validates that a string is a valid zip code.
            Relies on <see cref="T:JK.Common.Specifications.ZipCodeSpecification"/>
            </summary>
            <param name="valueToValidate">Current string object from extension method.</param>
            <returns>True if valid zip code otherwise false.</returns>
        </member>
        <member name="M:JK.Common.Extensions.StringExtensions.RemoveUnitedStatesCurrencyFormat(System.String)">
            <summary>
            Removes US (dollar) currency format characters from a string.
            </summary>
            <param name="valueToFormat">Current string object from extension method.</param>
            <returns>String that can be parsed into a number.</returns>
        </member>
        <member name="M:JK.Common.Extensions.StringExtensions.Reverse(System.String)">
            <summary>
            Reverses the characters within a string.
            </summary>
            <param name="valueToReverse">Current string object from extension method.</param>
            <returns>The original string in reverse.</returns>
        </member>
        <member name="M:JK.Common.Extensions.StringExtensions.StripXml(System.String)">
            <summary>
            Removes XML/HTML from given text block.
            </summary>
            <param name="valueToStrip">Current string object from extension method.</param>
            <returns>Clean string with no XML/HTML.</returns>
        </member>
        <member name="M:JK.Common.Extensions.StringExtensions.Truncate(System.String,System.Int32)">
            <summary>
            Trims a block of text to a specified length. The string will be trimmed to 
            the previous space coming before the length position passed.
            Relies on <see cref="T:JK.Common.Text.StringTruncater"/>
            </summary>
            <param name="valueToTruncate">Current string object from extension method.</param>
            <param name="length">Number of characters to keep from the original string.</param>
            <returns>Truncated, or shortened, text.</returns>
        </member>
        <member name="M:JK.Common.Extensions.StringExtensions.Truncate(System.String,System.Int32,System.String)">
            <summary>
            Trims a block of text to a specified length. The string will be trimmed to 
            the previous space coming before the length position passed.
            Relies on <see cref="T:JK.Common.Text.StringTruncater"/>
            </summary>
            <param name="valueToTruncate">Current string object from extension method.</param>
            <param name="length">Number of characters to keep from the original string.</param>
            <param name="indicator">String of characters to indicate that a truncation has occurred.</param>
            <returns>Truncated, or shortened, text with an indicator marking where the truncation occurred.</returns>
        </member>
        <member name="T:JK.Common.Geospatial.CoordinateBase">
            <summary>Base object for latitudes and longitudes coordinates.</summary>
        </member>
        <member name="P:JK.Common.Geospatial.CoordinateBase.IsNegative">
            <summary>
            Gets or sets whether the coordinate represents positive or negative point.
            </summary>
        </member>
        <member name="P:JK.Common.Geospatial.CoordinateBase.Coordinate">
            <summary>
            Gets or sets the absolute value of the coordinate.
            </summary>
        </member>
        <member name="P:JK.Common.Geospatial.CoordinateBase.CoordinateSigned">
            <summary>
            Gets the signed value of the coordinate.
            </summary>
        </member>
        <member name="P:JK.Common.Geospatial.CoordinateBase.DecimalDegrees">
            <summary>
            Gets the unsigned degrees rounded to 10 decimal places.
            </summary>
        </member>
        <member name="P:JK.Common.Geospatial.CoordinateBase.DecimalDegreesSigned">
            <summary>
            Gets the signed degrees rounded to 10 decimal places.
            </summary>
        </member>
        <member name="P:JK.Common.Geospatial.CoordinateBase.DegreesSigned">
            <summary>
            Gets the signed degrees as an integer.
            </summary>
        </member>
        <member name="P:JK.Common.Geospatial.CoordinateBase.Degrees">
            <summary>
            Gets the unsigned degrees as an integer.
            </summary>
        </member>
        <member name="P:JK.Common.Geospatial.CoordinateBase.DecimalMinutes">
            <summary>
            Gets the minutes to 3 decimal places.
            </summary>
        </member>
        <member name="P:JK.Common.Geospatial.CoordinateBase.Minutes">
            <summary>
            Gets the minutes as an integer.
            </summary>
        </member>
        <member name="P:JK.Common.Geospatial.CoordinateBase.Seconds">
            <summary>
            Gets the seconds as an integer.
            </summary>
        </member>
        <member name="P:JK.Common.Geospatial.CoordinateBase.Direction">
            <summary>
            Gets the cardinal direction of the coordinate.
            </summary>
        </member>
        <member name="M:JK.Common.Geospatial.CoordinateBase.SetCoordinate(System.Double)">
            <summary>Sets the coordinate details.</summary>
            <param name="degrees">The amount of degrees.</param>
        </member>
        <member name="M:JK.Common.Geospatial.CoordinateBase.SetCoordinate(System.Double,System.Double)">
            <summary>Sets the coordinate details.</summary>
            <param name="degrees">The amount of degrees.</param>
            <param name="minutes">The amount of minutes.</param>
        </member>
        <member name="M:JK.Common.Geospatial.CoordinateBase.SetCoordinate(System.Double,System.Double,System.Double)">
            <summary>Sets the coordinate details.</summary>
            <param name="degrees">The amount of degrees.</param>
            <param name="minutes">The amount of minutes.</param>
            <param name="seconds">The amount of seconds.</param>
        </member>
        <member name="M:JK.Common.Geospatial.CoordinateBase.SetCoordinate(System.Double,JK.Common.Geospatial.Direction)">
            <summary>Sets the coordinate details.</summary>
            <param name="degrees">The amount of degrees.</param>
            <param name="direction">The cardinal direction.</param>
        </member>
        <member name="M:JK.Common.Geospatial.CoordinateBase.SetCoordinate(System.Double,System.Double,JK.Common.Geospatial.Direction)">
            <summary>Sets the coordinate details.</summary>
            <param name="degrees">The amount of degrees.</param>
            <param name="minutes">The amount of minutes.</param>
            <param name="direction">The cardinal direction</param>
        </member>
        <member name="M:JK.Common.Geospatial.CoordinateBase.SetCoordinate(System.Double,System.Double,System.Double,JK.Common.Geospatial.Direction)">
            <summary>Sets the coordinate details.</summary>
            <param name="degrees">The amount of degrees.</param>
            <param name="minutes">The amount of minutes.</param>
            <param name="seconds">The amount of seconds.</param>
            <param name="direction">The cardinal direction</param>
        </member>
        <member name="M:JK.Common.Geospatial.CoordinateBase.ToString">
            <summary>
            Returns a string that represents the current coordinate in decimal degrees.
            </summary>
            <returns>A string that represents the current coordinate.</returns>
        </member>
        <member name="M:JK.Common.Geospatial.CoordinateBase.ToString(JK.Common.Geospatial.DisplayFormat)">
            <summary>
            Formats the value of the current coordinate using the specified format.
            </summary>
            <param name="format">The format to use.</param>
            <returns>The value of the current coordinate in the specified format.</returns>
        </member>
        <member name="T:JK.Common.Geospatial.Latitude">
            <summary>Represents a latitude ("y" axis) co-ordinate.</summary>
        </member>
        <member name="T:JK.Common.Geospatial.Longitude">
            <summary>Represents a longitude ("x" axis) coordinate.</summary>
        </member>
        <member name="T:JK.Common.ListItem">
            <summary>
            Class meant to represent data to be displayed in any of 
            the .NET list controls such as the System.Web.UI.WebControls DropDownList, 
            the System.Windows.Controls ComboBox, etc.
            </summary>
        </member>
        <member name="T:JK.Common.ListItem`1">
            <summary>
            Class meant to represent data to be displayed in any of 
            the .NET list controls such as the System.Web.UI.WebControls DropDownList, 
            the System.Windows.Controls ComboBox, etc.
            </summary>
            <typeparam name="T">Type of the object's identifier</typeparam>
        </member>
        <member name="T:JK.Common.Patterns.Specification.AndSpecification`1">
            <summary>
            Generic And specification
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="M:JK.Common.Patterns.Specification.AndSpecification`1.#ctor(JK.Common.Patterns.Specification.ISpecification{`0},JK.Common.Patterns.Specification.ISpecification{`0})">
            <summary>
            Initializes a new instance of the AndSpecification class.
            </summary>
            <param name="left">The left entity.</param>
            <param name="right">The right entity.</param>
        </member>
        <member name="M:JK.Common.Patterns.Specification.AndSpecification`1.IsSatisfiedBy(`0)">
            <summary>
            Determines whether the specified candidate is satisfied by TEntity.
            </summary>
            <param name="candidate">The candidate.</param>
            <returns>True if is satisfied by the specified candidate; otherwise false.</returns>
        </member>
        <member name="T:JK.Common.Patterns.Specification.CompositeSpecification`1">
            <summary>
            Generic CompositeSpecification.
            </summary>
            <typeparam name="TEntity">The type of entity.</typeparam>
        </member>
        <member name="F:JK.Common.Patterns.Specification.CompositeSpecification`1.Left">
            <summary>
            The composite specification's left entity.
            </summary>
        </member>
        <member name="F:JK.Common.Patterns.Specification.CompositeSpecification`1.Right">
            <summary>
            The composite specification's right entity.
            </summary>
        </member>
        <member name="M:JK.Common.Patterns.Specification.CompositeSpecification`1.#ctor(JK.Common.Patterns.Specification.ISpecification{`0},JK.Common.Patterns.Specification.ISpecification{`0})">
            <summary>
            Initializes a new instance of the CompositeSpecification class.
            </summary>
            <param name="leftEntity">The left entity.</param>
            <param name="rightEntity">The right entity.</param>
        </member>
        <member name="T:JK.Common.Patterns.Specification.OrSpecification`1">
            <summary>
            Generic Or specification.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="M:JK.Common.Patterns.Specification.OrSpecification`1.#ctor(JK.Common.Patterns.Specification.ISpecification{`0},JK.Common.Patterns.Specification.ISpecification{`0})">
            <summary>
            Initializes a new instance of the OrSpecification class.
            </summary>
            <param name="left">The left entity.</param>
            <param name="right">The right entity.</param>
        </member>
        <member name="M:JK.Common.Patterns.Specification.OrSpecification`1.IsSatisfiedBy(`0)">
            <summary>
            Determines whether the specified candidate is satisfied by TEntity.
            </summary>
            <param name="candidate">The candidate.</param>
            <returns>True if is satisfied by the specified candidate; otherwise false.</returns>
        </member>
        <member name="T:JK.Common.Patterns.Specification.Specification`1">
            <summary>
            Abstraction on ISpecification that supplies And, Or and Not.
            </summary>
            <typeparam name="TEntity">The type of entity.</typeparam>
        </member>
        <member name="M:JK.Common.Patterns.Specification.Specification`1.IsSatisfiedBy(`0)">
            <summary>
            Determines whether the specified candidate is satisfied by TEntity.
            </summary>
            <param name="candidate">The candidate.</param>
            <returns>True if is satisfied by the specified candidate; otherwise false.</returns>
        </member>
        <member name="M:JK.Common.Patterns.Specification.Specification`1.And(JK.Common.Patterns.Specification.ISpecification{`0})">
            <summary>
            Ands the specified specification.
            </summary>
            <param name="specification">The specification</param>
            <returns>Returns a new specification of type And.</returns>
        </member>
        <member name="M:JK.Common.Patterns.Specification.Specification`1.Not">
            <summary>
            Performs the 'not' operators on this instance.
            </summary>
            <returns>Returns a new specification of type Not.</returns>
        </member>
        <member name="M:JK.Common.Patterns.Specification.Specification`1.Or(JK.Common.Patterns.Specification.ISpecification{`0})">
            <summary>
            Performs the 'or' operator on the specified specification.
            </summary>
            <param name="specification">The specification.</param>
            <returns>Returns a new specification of type Or.</returns>
        </member>
        <member name="T:JK.Common.TemperatureConverter">
            <summary>
            Class which contains temperature conversion logic.
            </summary>
        </member>
        <member name="M:JK.Common.TemperatureConverter.ConvertCelsiusToFahrenheit(System.Double)">
            <summary>
            Converts celsius temperature to fahrenheit temperature.
            </summary>
            <param name="celsiusTemperature">Celsius temperature to convert.</param>
            <returns>Converted fahrenheit temperature.</returns>
        </member>
        <member name="M:JK.Common.TemperatureConverter.ConvertFahrenheitToCelsius(System.Double)">
            <summary>
            Converts fahrenheit temperature to celsius temperature.
            </summary>
            <param name="fahrenheitTemperature">Fahrenheit temperature to convert.</param>
            <returns>Converted celsius temperature.</returns>
        </member>
        <member name="T:JK.Common.Text.StringDelimiter">
            <summary>
            This class builds a delimited string.
            </summary>
        </member>
        <member name="M:JK.Common.Text.StringDelimiter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the StringDelimiter class.
            </summary>
            <param name="delimiter">The string to use when delimiting sections.</param>
        </member>
        <member name="P:JK.Common.Text.StringDelimiter.DelimitedText">
            <summary>
            Gets the delimited text string.
            </summary>
        </member>
        <member name="M:JK.Common.Text.StringDelimiter.AddText(System.String)">
            <summary>
            Adds a block of text to the current string and delimits if necessary.
            </summary>
            <param name="addition">The string to add to the current string.</param>
        </member>
        <member name="T:JK.Common.Text.StringTruncater">
            <summary>
            Class which truncates strings.
            </summary>
        </member>
        <member name="M:JK.Common.Text.StringTruncater.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JK.Common.Text.StringTruncater"/> class. 
            </summary>
            <param name="originalText">
            Text to be truncated.
            </param>
        </member>
        <member name="M:JK.Common.Text.StringTruncater.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JK.Common.Text.StringTruncater"/> class.
            </summary>
            <param name="originalText">Text to be truncated.</param>
            <param name="indicator">
            Indicator to be placed within the truncated text to indicate that 
            a truncation has taken place.
            </param>
        </member>
        <member name="P:JK.Common.Text.StringTruncater.Indicator">
            <summary>
            Gets or sets the indicator to concatenate to the end of truncated text.
            Ex: '...'
            </summary>
        </member>
        <member name="M:JK.Common.Text.StringTruncater.TruncateToLength(System.Int32)">
            <summary>
            Truncates the original text to a given length.
            </summary>
            <param name="length">Length of string to output.</param>
            <returns>Original text truncated to given length.</returns>
        </member>
        <member name="T:JK.Common.Text.TemplateProcessor">
            <summary>
            Class which places values from objects into a given template.
            </summary>
        </member>
        <member name="M:JK.Common.Text.TemplateProcessor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JK.Common.Text.TemplateProcessor"/> class.
            </summary>
            <param name="template">Template place data values into.</param>
        </member>
        <member name="M:JK.Common.Text.TemplateProcessor.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JK.Common.Text.TemplateProcessor"/> class.
            </summary>
            <param name="template">Template place data values into.</param>
            <param name="tokenStart">Starting value of the tokens used in the template.</param>
            <param name="tokenEnd">Ending value of the tokens used in the template.</param>
        </member>
        <member name="P:JK.Common.Text.TemplateProcessor.Objects">
            <summary>
            Gets or sets the list of objects containing the data to be used in the template.
            </summary>
        </member>
        <member name="P:JK.Common.Text.TemplateProcessor.TokenStart">
            <summary>
            Gets or sets the starting value of the tokens used in the template.
            </summary>
        </member>
        <member name="P:JK.Common.Text.TemplateProcessor.TokenEnd">
            <summary>
            Gets or sets the ending value of the tokens used in the template.
            </summary>
        </member>
        <member name="M:JK.Common.Text.TemplateProcessor.ProcessTemplate">
            <summary>
            Processes the template using the given objects.
            </summary>
            <returns>Template format with data inserted where tokens existed.</returns>
        </member>
        <member name="T:JK.Common.TimeConverter">
            <summary>
            Class which contains time conversion logic.
            </summary>
        </member>
        <member name="M:JK.Common.TimeConverter.ConvertHoursToMinutes(System.Int32)">
            <summary>
            Converts hours to minutes.
            </summary>
            <param name="hours">Number of hours to convert.</param>
            <returns>Number of minutes in the given number of hours.</returns>
        </member>
        <member name="M:JK.Common.TimeConverter.ConvertMinutesToSeconds(System.Int32)">
            <summary>
            Converts minutes to seconds.
            </summary>
            <param name="minutes">Number of minutes to convert.</param>
            <returns>Number of seconds in the given number of minutes.</returns>
        </member>
        <member name="M:JK.Common.TimeConverter.ConvertSecondsToMilliseconds(System.Int32)">
            <summary>
            Converts seconds to milliseconds.
            </summary>
            <param name="seconds">Number of seconds to convert.</param>
            <returns>Number of milliseconds in the given number of seconds.</returns>
        </member>
        <member name="M:JK.Common.TimeConverter.ConvertHoursToMilliseconds(System.Int32)">
            <summary>
            Converts hours to milliseconds.
            </summary>
            <param name="hours">Number of hours to convert.</param>
            <returns>Number of milliseconds in the given number of hours.</returns>
        </member>
        <member name="M:JK.Common.TimeConverter.ConvertMinutesToMilliseconds(System.Int32)">
            <summary>
            Converts minutes to milliseconds.
            </summary>
            <param name="minutes">Number of minutes to convert.</param>
            <returns>Number of milliseconds in the given number of minutes.</returns>
        </member>
        <member name="T:JK.Common.TypeHelpers.BooleanConverter">
            <summary>
            Class initially built to aid in data imports.
            </summary>
        </member>
        <member name="T:JK.Common.TypeHelpers.DateTimeFormatter">
            <summary>
            Class which contains methods which formats a DateTime into a string.
            </summary>
        </member>
        <member name="M:JK.Common.TypeHelpers.DateTimeFormatter.FormatAsFullDateLongTimeString(System.DateTime)">
            <summary>
            Formats the value of the current DateTime object to its equivalent 
            full date and long time string representation.
            </summary>
            <param name="dateTime">DateTime to convert to a string.</param>
            <returns>Date and time string in the format: Sunday, January 31, 2010 12:45:30 PM</returns>
        </member>
        <member name="M:JK.Common.TypeHelpers.DateTimeFormatter.FormatAsFullDateShortTimeString(System.DateTime)">
            <summary>
            Formats the value of the current DateTime object to its equivalent 
            full date and short time string representation.
            </summary>
            <param name="dateTime">DateTime to convert to a string.</param>
            <returns>Date and time string in the format: Sunday, January 31, 2010 12:45 PM</returns>
        </member>
        <member name="M:JK.Common.TypeHelpers.DateTimeFormatter.FormatAsGeneralDateShortTimeString(System.DateTime)">
            <summary>
            Formats the value of the current DateTime object to its equivalent 
            general date and short time string representation.
            </summary>
            <param name="dateTime">DateTime to convert to a string.</param>
            <returns>Date and time string in the format: 1/31/2010 12:45 PM</returns>
        </member>
        <member name="M:JK.Common.TypeHelpers.DateTimeFormatter.FormatAsMonthDayString(System.DateTime)">
            <summary>
            Formats the value of the current DateTime object to its equivalent 
            month and day string representation.
            </summary>
            <param name="dateTime">DateTime to convert to a string.</param>
            <returns>Date and time string in the format: January 31</returns>
        </member>
        <member name="M:JK.Common.TypeHelpers.DateTimeFormatter.FormatAsRfc1123String(System.DateTime)">
            <summary>
            Formats the value of the current DateTime object to its equivalent 
            RFC1123 string representation.
            </summary>
            <param name="dateTime">DateTime to convert to a string.</param>
            <returns>Date and time string in the format: Sun, 31 Jan 2010 12:45:30 GMT</returns>
        </member>
        <member name="M:JK.Common.TypeHelpers.DateTimeFormatter.FormatAsSortableDateTimeString(System.DateTime)">
            <summary>
            Formats the value of the current DateTime object to its equivalent 
            sortable date and time string representation.
            </summary>
            <param name="dateTime">DateTime to convert to a string.</param>
            <returns>Date and time string in the format: 2010-01-31T12:45:30</returns>
        </member>
        <member name="M:JK.Common.TypeHelpers.DateTimeFormatter.FormatAsUniversalSortableString(System.DateTime)">
            <summary>
            Formats the value of the current DateTime object to its equivalent 
            universal sortable date and time string representation.
            </summary>
            <param name="dateTime">DateTime to convert to a string.</param>
            <returns>Date and time string in the format: 2010-01-31 12:45:30Z</returns>
        </member>
        <member name="M:JK.Common.TypeHelpers.DateTimeFormatter.FormatAsUniversalString(System.DateTime)">
            <summary>
            Formats the value of the current DateTime object to its equivalent 
            Coordinated Universal Time (UTC) string representation.
            </summary>
            <param name="dateTime">DateTime to convert to a string.</param>
            <returns>Date and time string in the format: Sunday, January 31, 2010 6:45:30 PM
            (This takes into account time zone and returns UTC time)</returns>
        </member>
        <member name="M:JK.Common.TypeHelpers.DateTimeFormatter.FormatAsYearMonthString(System.DateTime)">
            <summary>
            Formats the value of the current DateTime object to its equivalent 
            year and month string representation.
            </summary>
            <param name="dateTime">DateTime to convert to a string.</param>
            <returns>Date and time string in the format: January, 2010</returns>
        </member>
        <member name="M:JK.Common.TypeHelpers.DateTimeHelper.CalculateAge(System.DateTime,System.DateTime)">
            <summary>
            Calculates age of an individual.
            </summary>
            <param name="currentDate">Date to calculate age from.</param>
            <param name="birthday">Date of birth.</param>
            <returns>Age from birth date to given date.</returns>
        </member>
        <member name="M:JK.Common.TypeHelpers.DateTimeHelper.CalculateAge(System.DateTime)">
            <summary>
            Calculates age of an individual.
            </summary>
            <param name="birthday">Date of birth.</param>
            <returns>Age from birth date to date today.</returns>
        </member>
        <member name="M:JK.Common.TypeHelpers.DateTimeHelper.GetAbbreviatedDayName(System.DateTime)">
            <summary>
            Gets the abbreviated day name.
            </summary>
            <param name="date">Date of day.</param>
            <returns>Abbreviated day name.</returns>
        </member>
        <member name="M:JK.Common.TypeHelpers.DateTimeHelper.GetAbbreviatedDayName(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            Gets the abbreviated day name.
            </summary>
            <param name="date">Date of day.</param>
            <param name="currentCulture">Culture to use when getting day name.</param>
            <returns>Abbreviated day name.</returns>
        </member>
        <member name="M:JK.Common.TypeHelpers.DateTimeHelper.GetAbbreviatedMonthName(System.DateTime)">
            <summary>
            Gets the abbreviated month name.
            </summary>
            <param name="date">Date within the month to abbreviate.</param>
            <returns>Abbreviated month name.</returns>
        </member>
        <member name="M:JK.Common.TypeHelpers.DateTimeHelper.GetAbbreviatedMonthName(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            Gets the abbreviated month name.
            </summary>
            <param name="date">Date within the month to abbreviate.</param>
            <param name="currentCulture">Culture to use when getting month name.</param>
            <returns>Abbreviated month name.</returns>
        </member>
        <member name="M:JK.Common.TypeHelpers.DateTimeHelper.GetDayName(System.DateTime)">
            <summary>
            Gets the full name of a given day.
            </summary>
            <param name="date">Date of day.</param>
            <returns>Full day name.</returns>
        </member>
        <member name="M:JK.Common.TypeHelpers.DateTimeHelper.GetDayName(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            Gets the full name of a given day.
            </summary>
            <param name="date">Date of day.</param>
            <param name="currentCulture">Culture to use when getting day name.</param>
            <returns>Full day name.</returns>
        </member>
        <member name="M:JK.Common.TypeHelpers.DateTimeHelper.GetMonthName(System.DateTime)">
            <summary>
            Gets the full name of a month.
            </summary>
            <param name="date">Date within the month.</param>
            <returns>Full month name.</returns>
        </member>
        <member name="M:JK.Common.TypeHelpers.DateTimeHelper.GetMonthName(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            Gets the full name of a month.
            </summary>
            <param name="date">Date within the month.</param>
            <param name="currentCulture">Culture to use when getting month name.</param>
            <returns>Full month name.</returns>
        </member>
        <member name="M:JK.Common.TypeHelpers.DateTimeHelper.IsSqlDate(System.DateTime)">
            <summary>
            Determines whether or not a given date is valid to place in a
            SQL date time column.
            </summary>
            <param name="date">Date to check against SQL date.</param>
            <returns>True if valid SQL date, otherwise false.</returns>
        </member>
        <member name="M:JK.Common.TypeHelpers.DateTimeHelper.IsWeekday(System.DateTime)">
            <summary>
            Determines whether or not the given date is a weekday.
            </summary>
            <param name="date">Date to check.</param>
            <returns>True if weekday, otherwise false.</returns>
        </member>
        <member name="M:JK.Common.TypeHelpers.DateTimeHelper.IsWeekend(System.DateTime)">
            <summary>
            Determines whether or not the given date is a weekend.
            </summary>
            <param name="date">Date to check.</param>
            <returns>True if weekend, otherwise false.</returns>
        </member>
        <member name="T:JK.Common.TypeHelpers.EnumHelper">
            <summary>
            Class which contains enum utility methods.
            </summary>
        </member>
        <member name="M:JK.Common.TypeHelpers.EnumHelper.ConvertToListItems(System.Type)">
            <summary>
            Gets a list of the items within an enum. Values will be filled with 
            the constant given to each enum value and the Display will be filled with
            either the enum value or the ComponentModel DescriptionAttribute.
            </summary>
            <param name="type">Enum Type to use. Ex: typeof(EnumTypeName</param>
            <returns>A list of ListItem for the given enum.</returns>
        </member>
        <member name="M:JK.Common.TypeHelpers.EnumHelper.GetByInteger``1(System.Int32)">
            <summary>
            Gets an Enumeration value by its associated integer value.
            </summary>
            <typeparam name="T">Enumeration Type to use. Ex: typeof(EnumerationTypeName)</typeparam>
            <param name="value">Integer value.</param>
            <returns>Enumeration value of type T.</returns>
        </member>
        <member name="M:JK.Common.TypeHelpers.EnumHelper.GetByInteger``1(System.Nullable{System.Int32})">
            <summary>
            Gets an Enumeration value by its associated integer value.
            </summary>
            <typeparam name="T">Enumeration Type to use. Ex: typeof(EnumerationTypeName)</typeparam>
            <param name="value">Integer value.</param>
            <returns>Enumeration value of type T.</returns>
        </member>
        <member name="M:JK.Common.TypeHelpers.EnumHelper.GetInteger``1(System.Nullable{``0})">
            <summary>
            Gets the integer value associated with the given enumeration type value.
            </summary>
            <param name="value">Enumeration type value.</param>
            <returns>Integer value.</returns>
        </member>
        <member name="M:JK.Common.TypeHelpers.EnumHelper.IsValidValue``1(System.Byte)">
            <summary>
            Determines whether a given byte is a byte value within an enumeration.
            </summary>
            <typeparam name="T">Type of enumeration.</typeparam>
            <param name="value">Byte value to check for.</param>
            <returns>True if found, otherwise false.</returns>
        </member>
        <member name="M:JK.Common.TypeHelpers.EnumHelper.IsValidValue``1(System.Int32)">
            <summary>
            Determines whether a given integer is an integer value within an enumeration.
            </summary>
            <typeparam name="T">Type of enumeration.</typeparam>
            <param name="value">Integer to check for.</param>
            <returns>True if found, otherwise false.</returns>
        </member>
        <member name="M:JK.Common.TypeHelpers.StringHelper.Reverse(System.String)">
            <summary>
            Reverses the characters within a string.
            </summary>
            <param name="valueToReverse">Current string object from extension method.</param>
            <returns>The original string in reverse.</returns>
        </member>
        <member name="M:JK.Common.TypeHelpers.StringHelper.StripXml(System.String)">
            <summary>
            Removes XML/HTML from given text block.
            </summary>
            <param name="valueToStrip">Current string object from extension method.</param>
            <returns>Clean string with no XML/HTML.</returns>
        </member>
        <member name="M:JK.Common.TypeHelpers.StringHelper.FromBase64(System.String)">
            <summary>Converts a string from base 64.</summary>
            <param name="base64Text">Text to convert from base 64.</param>
            <returns>String converted from base 64.</returns>
        </member>
        <member name="M:JK.Common.TypeHelpers.StringHelper.ToBase64(System.String)">
            <summary>Converts a string to base 64.</summary>
            <param name="text">Text to convert to base 64.</param>
            <returns>String converted to base 64.</returns>
        </member>
        <member name="T:JK.Common.Xml.XmlSerializationFacade">
            <summary>
            Wrapper/facade for XML Serialization/Deserialization functionality of .NET.
            </summary>
        </member>
        <member name="M:JK.Common.Xml.XmlSerializationFacade.GetXmlAsString``1(``0)">
            <summary>
            Uses XML serialization to convert an object into its XML representation.
            </summary>
            <typeparam name="T">Type of object to turn into XML.</typeparam>
            <param name="entity">Object to turn into XML.</param>
            <returns>An XML representation of an object as a string.</returns>
        </member>
    </members>
</doc>
